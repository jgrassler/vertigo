.ds PN vectl

.TH vectl 1 "Aug 2013" "VeRTIGO" "VeRTIGO Manual"

.SH NAME
vectl \- commandline tool to administer VeRTIGO

.SH AUTHOR(S)

  Roberto Doriguzzi Corin <roberto.doriguzzi@create-net.org>
  Matteo Gerola <matteo.gerola@create-net.org>
  Rob Sherwood <rob.sherwood@stanford.edu>

.SH SYNOPSIS
.B vectl
[\fIoptions\fR] \fIcommand [\fIargs\fR...]

.SH DESCRIPTION
The
.B vectl
program is a command line tool for configuring, debugging, monitoring, and
administering running VeRTIGO instances.  It is able to show the
current state of a VeRTIGO, including features, configuration, flowspace 
entries and virtual links.

Every VeRTIGO instance runs an XMLRPC server and accepts API calls
as documented in org.flowvisor.api.FVUserAPI.java.  The tool \fBvectl\fR
is just a command-line client that invokes these calls. 

.SH OPTIONS


.TP 
\fB--url\fR=\fIURL\fR
Specifes the URL where the VeRTIGO's XMLRPC server is listening.  Default is:
\fIhttps://localhost:8080\fR

.TP 
\fB--user\fR=\fIUSER\fR
Specifes the VeRTIGO user name to use when connecting to the XMLRPC server.  Default is: 
\fIroot\fR

.TP
\fB--debug\fR=\fItrue\fR
Turns on additional debugging.  Specifically, print the full stack frame on exception.  Default is: 
\fIfalse\fR

.TP
\fB--passwd-file\fR=\fIfile\fR
Instead of prompting for the password, read it from \fIfile\fR (or from standard input if a \fIfile\fR argument of "-" is specified).  Default is to prompt for the password.

.SH COMMANDS

With the \fBvectl\fR program, the expectation is the VeRTIGO is up and running, with its XMLRPC
server listening at \fIURL\fR.  Currently \fBvectl\fR requires that the commands be camel-cased, 
e.g., \fIlistFlowSpace\fR, not \fIlistflowspace\fR or \fIlIstFlowSPACE\fR.  To be fixed soon.


.PP
These commands are for creating/managing/deleting slices.  Permissions on
modifying a slice are hierarchical: a user can modify their
own slice, as can the user who created the slice, transitively up the
chain to the root slice.

.TP
\fBlistSlices\fR
    Displays the currently configured slices.

.TP
\fBgetSliceInfo\fR \fIslicename\fR
    Displays the \fIslicename\fR's controller URL, contact information, and who created this slice.

.TP
\fBcreateSlice\fR \fIslicename\fR \fIcontroller_url\fR \fIemail\fR
    Creates a new slice.  Note that the \fIslicename\fR cannot contain
    any of the following characters: !:=[] or new lines.  The controller
    URL is of the form tcp:hostname[:port] so "tcp:controller.myco.com"
    or "tcp:127.0.0.1:12345", with the default port being 6633.  The email
    is used as the administrive contact point if there is a problem with
    the slice.

.TP
\fBchangeSlice\fR \fIslicename\fR \fIkey\fR \fIvalue\fR
    Allow a slice user to change values associated with their slice.
    Currently only "contact_email", "controller_host" and "controller_port"
    are changable.

.TP
\fBdeleteSlice\fR \fIslicename\fR
    Deletes a slice and removed all of the flowspace corresponding to the
    slice.  

.TP
\fBchangePasswd\fR \fIslicename\fR
    Change the password for slice \fIslicename\fR.



.PP
The following commands manipulate the VeRTIGO's flowspace.
Each flowspace entry consists of a DPID, a FLOW_MATCH rule, a list
of SLICEACTIONS, an ID, and a PRIORITY.  The format of the DPID and
FLOW_MATCH parameters are specified bellow in the DPID and FLOW_MATCH
sections.  A single flow entry makes the statement "The flowspace
described by FLOW_MATCH on switch DPID is controlled by the slices in
the list SLICEACTIONS".  Flow entries are sorted by PRIORITY (high number
is higher priority) and only the highest priority matched is considered.  Priorities are 
any positive integer in the range [0:2^31].  Additionally, each
flow entry is associated with a unique, rule-position-independent ID, that names
that specific rule.  While the XMLRPC API supports batching of add/remove/changing
flowspace rules for transactional changes, \fBvectl\fR does not.

.TP
\fBlistFlowSpace\fR
    Lists the VeRTIGO's flow-based slice policy rules, i.e., the flowspace.  

.TP
\fBremoveFlowSpace\fR \fIID\fR
    Removes rule with id=\fIID\fR.  
    
.TP
\fBaddFlowSpace\fR \fIDPID\fR \fIPRIORITY\fR \fIFLOW_MATCH\fR \fISLICEACTIONS\fR
    Creates a new rule and returns the new rule's ID.  See below for the format of DPID, FLOW_MATCH, and SLICEACTIONS.
.TP
\fBchangeFlowSpace\fR \fIID\fR \fIDPID\fR \fIPRIORITY\fR \fIFLOW_MATCH\fR \fISLICEACTIONS\fR
    Replaces rule ID with a new rule with the specificed parameters.  See below for the format of DPID, FLOW_MATCH, and SLICEACTIONS.
.PP
The following commands provide information on the devices connected to the VeRTIGO (e.g., switches)
and the topology that connects them.

.TP
\fBlistDevices\fR
    Displays the devices (e.g., switches) currently connected to the VeRTIGO, by DPID.

.TP
\fBgetDeviceInfo\fR \fIdpid\fR
    Displays information about a connected device, including available ports and remote connection.

.TP
\fBgetLinks\fR
    Displays the links between the devices, as inferred by VeRTIGO's topology discovery mechanism.

.TP 
\fBregisterCallback\fR \fIURL\fR \fIcookie\fR
Register a XMLRPC callback for VeRTIGO to call when there is
a change in the topology.  Once registered, with each topology change
(with some dampenning), VeRTIGO will connect to the server listed in
URL, and make the XMLRPC call to the path of \fIURL\fR with \fIcookie\fR
as a parameter.

.TP 
\fBunregisterCallback\fR 
UnRegisters a previously registered XMLRPC callback.

.PP
These commands are a general purpose hook for manipulating all elements
of the VeRTIGO's config.  The VeRTIGO's config is internally stored
as a tree of options, delimited by exclaimation marks.  Care must be
taken while using them, as they bypass the sanity checks that more
specific commands use.  For example, it is possible to change a slice's
password via 

.B \fBvectl setConfig\fR slices!\fISLICENAME\fR!passwd_crypt 057432050a34e81e79bd842fec77dcad

but since there are no sanity checks on the password crypt string, it is
possible to accidentally set the password crypt to an invalid string.
These commands can only be run in supervisor mode, which currently is
only the "root" user.

.TP
\fBgetConfig\fR \fIconfigEntry\fR
    List the entire subtree of the VeRTIGO's configuration started
    at node \fIconfigEntry\fR.  Note that a literal period is used to
    denote the whole tree, so `\fBvectl getConfig\fR \fI.\fR` will list
    the VeRTIGO's entire configuration.

.TP
\fBsetConfig\fR \fIconfigEntry\fR \fIvalue\fR
    Set the value of a specific config entry to \fIvalue\fR.  The format
    of the value string must correspond to the type of \fIconfigEntry\fR, e.g., 
    a boolean value must be \fItrue\fR or \fIfalse\fR, an integer must be an
    decimal number, etc.  

.PP
The following commands relay how many OpenFlow messages have been
sent/recv/drop'd by switches and slices.  They are currently returned in a
single block string format, which is suboptimal, but will likely go away
if we get rid of XMLRPC.  Any message type not listed implicitly has a
count of zero (never appeared).  The current output looks something like:

.PP
Switch 00:00:00:00:00:00:00:01's STATS:
.br
---Sent---
.br
classifier-dpid=00:00:00:00:00:00:00:01 :: FEATURES_REPLY=3,HELLO=1
.br
Total :: FEATURES_REPLY=3,HELLO=1
.br
---Recv---
.br
slicer_bob_dpid=00:00:00:00:00:00:00:01 :: FEATURES_REQUEST=1
.br
slicer_alice_dpid=00:00:00:00:00:00:00:01 :: FEATURES_REQUEST=1,PACKET_OUT=1
.br
Total :: FEATURES_REQUEST=2,PACKET_OUT=1
.br
---Drop---
.br
Total ::
.br


.TP
\fBgetSliceStats\fR \fIsliceName\fR
    Returns statistics for \fIsliceName\fR in terms of messages sent, received, and dropped, subdivided by message type.

.TP
\fBgetSwitchStats\fR \fIdpid\fR
    Returns statistics for the switch with dpid \fIdpid\fR in terms of messages sent, received, and dropped, subdivided by message type.

.TP
\fBgetSwitchFlowDB\fR \fIdpid\fR
    Dump's the VeRTIGO's view of \fIdpid\fR's flow table.  The VeRTIGO
    tracks the sum of the flow_mods and flow_removed messages, so this
    DB should be up to date baring race conditions and switch bugs.
    For hardware switches, this is likely much cheaper to ask the VeRTIGO
    for its cached copy than to ask the switch itself. Note that track_flows must
    be enabled for this feature to work, else this command will return an empty list.
    Flow tracking can be enabled with:
        \fBvectl\fR \fIsetConfig\fR \fB!flowvisor!track_flows\fR \fItrue\fR

.TP
\fBgetSliceRewriteDB\fR \fIsliceName\fR \fIdpid\fR
    Dump how the VeRTIGO has rewritten the slices flowentries.  This command
    outputs how the original flowMod \fIfm_original\fR was rewritten to a 
    sequence of flowMods: \fIfm_rewrite1,fm_rewrite2\fR.  Similar to getSwitchFlowDB,
    this command returns an empty list if track_flows is disabled.

.PP 
The following commands are used for debugging the XMLRPC server
.TP
\fBping\fR \fImsg\fR
    Simply echo's \fImsg\fR back, verifying that the XMLRPC server is up, functioning, and the authentication is working.
    Also includes the version of the current running VeRTIGO (only to authenticated users), for example:
    
    % vectl ping "Hello"
    Enter fvadmin's passwd: 
    Got reply:
    PONG(fvadmin): VeRTIGO version=vertigo-0.3.7::Hello



.SH "FLOW SYNTAX"

Some \fBvectl\fR commands accept an argument that describes a flow or
flows.  Such flow descriptions comprise a series
\fIfield\fB=\fIvalue\fR assignments, separated by commas.

The following field assignments describe how a flow matches a packet.
If any of these assignments is omitted from the flow syntax, the field
is treated as a wildcard; thus, if all of them are omitted, the
resulting flow matches all packets.  The string \fBall\fR or \fBany\fR
is used to specify a flow that matches all packets.

.IP \fBin_port=\fIport_no\fR
Matches physical port \fIport_no\fR.  Switch ports are numbered as
displayed by \fBvectl\fR getDeviceInfo \fIDPID\fR.

.IP \fBdl_vlan=\fIvlan\fR
Matches IEEE 802.1q virtual LAN tag \fIvlan\fR.  Specify \fB0xffff\fR
as \fIvlan\fR to match packets that are not tagged with a virtual LAN;
otherwise, specify a number between 0 and 4095, inclusive, as the
12-bit VLAN ID to match.

.IP \fBdl_src=\fImac\fR
Matches Ethernet source address \fImac\fR, which should be specified
as 6 pairs of hexadecimal digits delimited by colons,
e.g. \fB00:0A:E4:25:6B:B0\fR.

.IP \fBdl_dst=\fImac\fR
Matches Ethernet destination address \fImac\fR.

.IP \fBdl_type=\fIethertype\fR
Matches Ethernet protocol type \fIethertype\fR, which should be
specified as a integer between 0 and 65535, inclusive, either in
decimal or as a hexadecimal number prefixed by \fB0x\fR,
e.g. \fB0x0806\fR to match ARP packets.

.IP \fBnw_src=\fIip\fR[\fB/\fInetmask\fR]
Matches IPv4 source address \fIip\fR, which should be specified as an
IP address, e.g. \fB192.168.1.1\fR.  The optional \fInetmask\fR allows matching
only on an IPv4 address prefix.  The netmask is specificed "CIDR-style", i.e., 
\fB192.168.1.0/24\fR.

.IP \fBnw_dst=\fIip\fR[\fB/\fInetmask\fR]
Matches IPv4 destination address \fIip\fR.

.IP \fBnw_proto=\fIproto\fR
Matches IP protocol type \fIproto\fR, which should be specified as a
decimal number between 0 and 255, inclusive, e.g. 6 to match TCP
packets.

.IP \fBnw_tos=\fItos/dscp\fR
Matches ToS/DSCP (only 6-bits, not modify reserved 2-bits for future
use) field of IPv4 header \fItos/dscp\fR, which should be specified as
a decimal number between 0 and 255, inclusive.

.IP \fBtp_src=\fIport\fR
Matches transport-layer (e.g., TCP, UDP, ICMP) source port \fIport\fR,
which should be specified as a decimal number between 0 and 65535 (in
the case of TCP or UDP) or between 0 and 255 (in the case of ICMP),
inclusive, e.g. 80 to match packets originating from a HTTP server.

.IP \fBtp_dst=\fIport\fR
Matches transport-layer destination port \fIport\fR.


.PP
For example:


.TP 
Match on all traffic that has ether_type of IP and IP->protocol of ICMP: 
.B \fBdl_type=0x0800,nw_proto=1\fR.

.TP
A more complicated FLOW MATCH:
.B \fBdl_src=00:23:10:ff:a4:b1,dl_type=0x0800,nw_proto=6,tp_dst=80\fR

.SH DPID
The datapath identifier (DPID) is a unique ID to name and identify
OpenFlow devices.  With vectl, DPIDs are 8 bytes and can be specified as a decimal
number or as 8 hex octets, e.g., 00:00:00:23:10:35:ce:a5.  The DPID
ff:ff:ff:ff:ff:ff:ff is a "wildcard" DPID that matches all DPIDs.
It can be specified using any of the following short cuts: \fBall\fR, \fBany\fR,
or \fBALL_DPIDS\fR.

.SH SLICEACTIONS
Slice actions is a comma separated list of slices that have control
over a specific FlowSpace.
Slice actions are of the form "Slice:\fIslicename1\fR=\fIperm\fR[\fISlice:slicename2\fR=\fIperm\fR[...]]".
Each slice can have three types of permissions over a flowspace: \fBDELEGATE\fR, \fBREAD\fR, and \fBWRITE\fR.  
Permissions are \fIcurrently\fR a bitmask specified as an integer, with DELEGATE=1, READ=2, WRITE=4.  So,
"Slice:alice=5,bob=2" would give Alice's slice DELEGATE and WRITE permissions (1+4=5), but Bob only READ permissions.
Improving this interface is on the TODO list.  For example, 

 \fIvectl addFlowSpace all 2 any Slice:slice1=4,Slice:slice2=2\fR

.TP 
.B DELEGATE
A slice can delegate control of this flowspace to another slice.  It also has permissions to un-delegate/reclaim
the flowspace.

.TP 
.B READ
A slice receives packet_in's matching this flow entry, can send LLDP messages and stats to switches in this flow entry, 
but cannot write to or change the switch's flow table.  This is useful for implementing a monitoring slice.

.TP 
.B WRITE
A slice has all of the permissions of READ but can also write to the
flow table if the flow_mod matches this flow entry.  VeRTIGO will
try to rewrite a flow_mod (if necessary) as the logical intersection
of a slice's flow_mod and the union of its FlowSpace.

.SH VIRTUAL LINKS MANAGEMENT
The following commands can be used to instantiate and administer Virtual Links.

.TP 
\fBaddLink\fR \fIslicename\fR \fIlink_description\fR
Where \fIlink_description\fR is a sequence of pairs 00:00:00:00:00:00:00:0X/Y representing the datapath_id of a switch plus a physical port number. 
    e.g., \fBvectl addLink charlie 00:00:00:00:00:00:00:01/1-00:00:00:00:00:00:00:02/1,00:00:00:00:00:00:00:02/2-00:00:00:00:00:00:00:03/1\fR

The command above creates a direct connection (Virtual Link) between switches with datapath_id 00:00:00:00:00:00:00:01 and 00:00:00:00:00:00:00:03 passing through 00:00:00:00:00:00:00:02.

.TP
\fBchangeLink\fR \fIslicename\fR \fIlink_id\fR \fIlink_description\fR
Similar to addLink, but is used to change the description of a virtual link while maintaining the same identifier.

.TP    
\fBgetVirtualLinks\fR \fIslicename\fR
Prints all the virtual links instantiated for the given slice

.TP    
\fBdeleteLink\fR \fIslicename\fR \fIlink_id\fR
Deletes a link with identifier \fIlink_id\fR on VT charlie. The identifier can be obtained through command getVirtualLinks.
  
.SH STATISTICS COLLECTION MODULE
VeRTIGO includes an internal module which collects statistics of traffic crossing the network. Statistics samples are collected for each enabled physical port and are not divided per slice. Statistics are stored to an internal database and can be retrieved through the vectl command. 

.TP
\fBenableVTPlannerStats\fR \fIenable\fR
Enable/disable the stats collection process. "0" means disabled, "1" or above means enabled.

.TP    
\fBsetVTPlannerTimers\fR \fItimer\fR \fIexp_time\fR
Sets timers for the stats collection process. \fItimer\fR is the time between two stats requests, \fIexp_time\fR is the history size in time units. The default time unit is "seconds", but also minutes, hours, days and weeks can be used (s=seconds, m=minutes, h=hours, d=days, w=weeks).
    e.g., \fBvectl setVTPlannerTimers 5s 1w\fR

.TP    
\fBgetVTPlannerTimers\fR
Prints timer and exp_timer values (see command above).

.TP
\fBgetVTPlannerSwitchInfo\fR \fIdpid\fR
Prints the switch info. \fIdpid\fR is the switch datapath_id with format 02:08:02:08:00:00:00:01. Value "all" is also allowed (without quotes) and returns the info of all the switches in the network. Refer to the OpenFlow Specification manual v1.0.0 in order to interpret some of the returned values.
.TP    
\fBgetVTPlannerPortInfo\fR \fIdpid\fR \fIport_no\fR
Prints the info of one or all ports of a switch. Available ports and switches can be obtained from the output of command getVTPlannerSwitchInfo described above. \fIport_no\fR can be a single port number or the string "all". The meaning of returned values CONFIG,FEATURES e STATE can be found at pages 17,18 and 19 of OpenFlow Specification v1.0.0.

.TP  
\fBgetVTPlannerPortStats\fR \fIdpid\fR \fIport_no\fR \fIdatetime1\fR \fIdatetime2\fR
Prints the collected stats of one port collected between datetime1 and datetime2. Value of datetime1 and datetime2 must be inserted in the format YYYY.MM.DD.hh.mm.ss.  
    e.g., \fBvectl getVTPlannerPortStats 02:08:02:08:00:00:00:01 4 2012.10.15.00.00.00 2012.10.15.23.59.59\fR
  
.fi
.SH "SEE ALSO"

.BR vertigo (8),
.BR veconfig (1),
